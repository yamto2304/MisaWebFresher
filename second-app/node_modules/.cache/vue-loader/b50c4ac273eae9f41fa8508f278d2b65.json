{"remainingRequest":"C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\src\\components\\form\\AddForm.vue?vue&type=template&id=31eb11aa&","dependencies":[{"path":"C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\src\\components\\form\\AddForm.vue","mtime":1617692105712},{"path":"C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hdtuan\\Desktop\\Github\\MisaWebFresher\\second-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}